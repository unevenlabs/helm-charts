# Name of the application.
applicationName: "example"

namespaceOverride: ""

# These labels will be added on all resources, and you can add additional labels from below on individual resource
labels:
  environment: "dev"
  owner: "payments"
  application: "balance"
  chain: "goerli"

deployment:
  # By default deploymentStrategy is set to rollingUpdate with maxSurge of 25% and maxUnavailable of 25%
  # You can change type to `Recreate` or can uncomment `rollingUpdate` specification and adjust them to your usage.
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%

  # Reload deployment if configMap/secret updates
  reloadOnChange: true

  # use host network
  hostNetwork: true

  # Select nodes to deploy which matches the following labels
  nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool

  # Init containers which runs before the app container
  hostAliases:
    - ip: "127.0.0.1"
      hostnames:
        - "foo.local"
        - "bar.local"
    - ip: "10.1.2.3"
      hostnames:
        - "foo.remote"
        - "bar.remote"

  # Init containers which runs before the app container
  initContainers:
    - name: init-contaner
      image: busybox
      imagePullPolicy: IfNotPresent
      command: ["/bin/sh"]

  # Additional labels for Deployment
  additionalLabels:
    key: value

  # Additional label added on pod which is used in Service's Label Selector
  podLabels:
    env: prod

  # Common labels for pod and deployment
  commonLabels:
    commonKey: commonValue

  # Annotations on deployments
  annotations:

  # Additional Pod Annotations added on pod created by this Deployment
  additionalPodAnnotations:
    key: value

  # Annotations for fluentd Configurations
  fluentdConfigAnnotations:
    fluentd:
      regex: hello
      timeFormat: world

  # Replicas to be created
  replicas: 2

  # Secrets used to pull image
  imagePullSecrets: ""

  # If want to mount Envs from configmap or secret
  envFrom:
    - type: configmap
      name: my-configmap
    - type: configmap
      nameSuffix: your-configmap
    - type: secret
      name: my-secret

  # Environment variables to be passed to the app container
  env:
    - name: ENVIRONMENT
      value: "dev"

  # Volumes to be added to the pod
  volumes:
    - name: config-volume
      configMap:
        name: configmap-name
    - name: configmap-volume
      configMap:
        name: '{{ template "application.name" . }}-configmap-nameSuffix'
    - name: secret-volume
      secret:
        secretName: secret-name
    - name: volume-name
      emptyDir: {}
    - name: persistent-volume-name
      persistentVolumeClaim:
        claimName: claim-name

  # Mount path for Volumes
  volumeMounts:
    - mountPath: /path
      name: volume-name

  # Taint tolerations for nodes
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "app"
      effect: "NoSchedule"

  # Pod affinity and pod anti-affinity allow you to specify rules about how pods should be placed relative to other pods.
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: disktype
                operator: In
                values:
                  - ssd

  # Image of the app container
  image:
    repository: repository/image-name
    tag: v1.0.0
    pullPolicy: IfNotPresent

  # Readiness and Liveness probes
  probes:
    readinessProbe:
      failureThreshold: 3
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
      initialDelaySeconds: 10
      httpGet:
        path: /path
        port: 8080
    livenessProbe:
      failureThreshold: 3
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
      initialDelaySeconds: 10
      httpGet:
        path: /path
        port: 8080
    startupProbe:
      failureThreshold: 3
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
      initialDelaySeconds: 10
      httpGet:
        path: /path
        port: 8080

  # Resources to be defined for pod
  resources:
    limits:
      memory: 256Mi
      cpu: 0.5
    requests:
      memory: 128Mi
      cpu: 0.1

  openshiftOAuthProxy:
    enabled: true
    port: 8080
    secretName: "openshift-oauth-proxy-tls"

  # Add additional containers besides init and app containers
  additionalContainers:
    - name: sidecar-contaner
      image: busybox
      imagePullPolicy: IfNotPresent
      command: ["/bin/sh"]

  # Security Context for the pod
  securityContext:
    # fsGroup: 2000

  # Command for primary container
  command: []

  # Args for primary contaner
  args: []

  # List of ports for the primary container
  ports:
    - containerPort: 8080
      name: http
      protocol: TCP
    - containerPort: 8778
      name: jolokia
      protocol: TCP
    - containerPort: 8443
      name: https
      protocol: TCP

# Add Storage volumes to the pods
persistence:
  enabled: true
  mountPVC: false
  mountPath: "/"
  accessMode: ReadWriteOnce
  ## If defined, storageClass: <storageClass>
  ## If set to "-", storageClass: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClass spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: "-"
  additionalLabels:
    key: "value"

  annotations:
  #  "helm.sh/resource-policy": keep
  storageSize: 8Gi

# Service object for servicing pods
service:
  additionalLabels:
    key: value
    expose: "true"
  annotations:
    config.xposer.unevenlabs.com/Domain: unevenlabs.com
    config.xposer.unevenlabs.com/IngressNameTemplate: "{{.Service}}-{{.Namespace}}"
    config.xposer.unevenlabs.com/IngressURLPath: /
    config.xposer.unevenlabs.com/IngressURLTemplate: "{{.Service}}.{{.Namespace}}.{{.Domain}"
    xposer.unevenlabs.com/annotations: |-
      kubernetes.io/ingress.class: external-ingress
      ingress.kubernetes.io/rewrite-target: /
      ingress.kubernetes.io/force-ssl-redirect: "true"

  ports:
    - port: 8080
      name: http
      protocol: TCP
      targetPort: 8080

# Role Based Access Control
rbac:
  enabled: true
  deployment:
    enabled: false

  # Service Account to use by pods
  serviceAccount:
    enabled: true
    name: ""

    # Additional Labels on service account
    additionalLabels:
      key: value

    # Annotations on service account
    annotations:
      # key: value

  # Create Roles (Namespaced)
  roles:
    - name: configmaps
      rules:
        - apiGroups:
            - ""
          resources:
            - configmaps
          verbs:
            - get
    - name: secrets
      rules:
        - apiGroups:
            - ""
          resources:
            - secrets
          verbs:
            - get

  # Create ClusterRoles (Clusterwide)
  clusterroles:
    - name: configmaps
      rules:
        - apiGroups:
            - ""
          resources:
            - configmaps
          verbs:
            - get
    - name: pods
      rules:
        - apiGroups:
            - ""
          resources:
            - pods
          verbs:
            - get
            - list
            - watch

# Additional ConfigMaps
configMap:
  enabled: true
  additionalLabels:
    common-label: value
  annotations:
    common-annotation: value
  files:
    - nameSuffix: code-config
      additionalLabels:
        test-label: value
      annotations:
        test-annotation: value
      data:
        key1: value1
        key2: value2
    - nameSuffix: dev-config
      data:
        key1: value1
        key2: value2

# Additional Secrets
secret:
  enabled: true
  additionalLabels:
    key: value
  annotations:
    # key: value
  files:
  # - nameSuffix: credentials
  #   data:
  #     secretKey1: secretValue1
  #     secretKey2: secretValue2
  # - nameSuffix: password
  #   data:
  #     secretKey1: secretValue1
  #     secretKey2: secretValue2

# Virtual Service for Istio ingress
virtualService:
  - protocol: tcp
    hosts: ["*"]
    destination:
      host: example.svc.cluster.local
      portNumber: 8080

  - additionalLabels:
      key: value

    # Additional annotations
    annotations:
      key: value

    # Istio gateway
    gateways:
      - default/default-gateway

    # Matching hosts
    hosts:
      - example.unevenlabs.com

    advancedMatch:
      - uri:
          prefix: /login
      - uri:
          prefix: /admin
        rewrite:
          uri: /

    destination:
      # Service name of the application
      host: example

      # Service port of the application
      portNumber: 80

    # Customize response header
    headers:
      request:
        set:
          - foo1: example1
          - foo2: example2
        add:
          - bar1: example1
          - bar2: example2
        remove:
          - baz

      response:
        set:
          - qux1: example1
          - qux2: example2
        add:
          - fred1: example1
          - fred2: example2
        remove:
          - thud

    # Cross-origin resource sharing for service
    corsPolicy:
      # Allowed origins
      allowOrigins:
        - https://example.com
      # List of allowed HTTP methods
      allowMethods:
        - POST
        - GET
      # Allowed to send request using credentials
      allowCredentials: true
      # List of allowed HTTP headers
      allowHeaders:
        - X-Foo-Bar
      # Cache duration of preflight request
      maxAge: "24h"

# Istio AuthorizationPolicy for service, used for Whitelisting purposes
authorizationPolicy:
  - additionalLabels:
      key: value
    # Additional annotations
    annotations:
      key: value
    matchLabels:
      application: "so-call-me-maybe-application"
    # List of allowed ips/cidr
    remoteIpBlocks:
      - "8.8.8.8"
      - "8.8.1.1/24"
    # List of allowed ips checked by xff header
    remoteIps:
      - "8.8.4.4"
    # List of allowed hosts
    hosts:
      - "call-me-maybe.dev.unevenlabs.com"
    # List of allowed HTTP methods
    methods:
      - "POST"
    # List of allowed HTTP paths {}
    paths:
      - "/heres-my-number"

# Service Monitor to collect Prometheus metrices
serviceMonitor:
  enabled: true

  # Additional labels
  additionalLabels:
    key: value

  # Additional annotations
  annotations:
    # key: value

  # List of the endpoints of service from which prometheus will scrape data
  endpoints:
    - interval: 5s
      path: /actuator/prometheus
      port: http

# autoscaling is used for horizonal pod autoscaling
autoscaling:
  # enabled is a boolean flag for enabling or disabling autoscaling
  enabled: true
  # additionalLabels defines additional labels
  additionalLabels:
    key: value
  # annotations defines annotations in key value pair
  annotations:
    # key: value
  # minReplicas sets the minimum number of replicas
  minReplicas: 1
  # maxReplicas sets the maximum number of replicas
  maxReplicas: 10
  # metrics is the list of metrics used for hpa
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 60

# AlertmanagerConfig object for defining application specific alertmanager configurations
alertmanagerConfig:
  enabled: true

  # AlertmanagerConfig selectionLabels to specify label to be picked up by Alertmanager to add it to base config. Read more about it at [https://docs.openshift.com/container-platform/4.7/rest_api/monitoring_apis/alertmanager-monitoring-coreos-com-v1.html] under .spec.alertmanagerConfigSelector
  selectionLabels:
    alertmanagerConfig: "workload"

  # AlertmanagerConfig spec, read details here [https://docs.openshift.com/container-platform/4.7/rest_api/monitoring_apis/alertmanagerconfig-monitoring-coreos-com-v1alpha1.html]
  spec:
    route:
      receiver: "null"
      groupBy:
        - job
      routes:
        - receiver: "null"
          groupBy:
            - alertname
            - severity
          continue: true
      groupWait: 30s
      groupInterval: 5m
      repeatInterval: 12h
    receivers:
      - name: "null"
    inhibitRules:
      - sourceMatch:
          - name: severity
            value: "critical"
        targetMatch:
          - name: severity
            value: "warning"
        equal: ["cluster", "service"]

# PrometheusRule object for defining application alerting rules
prometheusRule:
  enabled: true

  # PrometheusRule labels
  additionalLabels:
    prometheus: unevenlabs-workload-monitoring
    role: alert-rules

  # Groups with alerting rules. Read more here [https://docs.openshift.com/container-platform/4.7/rest_api/monitoring_apis/prometheusrule-monitoring-coreos-com-v1.html]

  groups:
    - name: example-app-uptime
      rules:
        - alert: ExampleAppDown
          annotations:
            message: >-
              The Example App is Down (Test Alert)
          expr: up{namespace="test-app"} == 0
          for: 1m
          labels:
            severity: critical

jobs:
  # first cron
  - name: hello-world
    image:
      repository: hello-world
      tag: latest
      imagePullPolicy: IfNotPresent
    schedule: "* * * * *"
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 3
    concurrencyPolicy: Allow
    restartPolicy: OnFailure

  # second cron
  - name: hello-ubuntu
    image:
      repository: ubuntu
      tag: latest
      imagePullPolicy: Always
    schedule: "*/5 * * * *"
    command: ["/bin/bash"]
    args:
      - "-c"
      - "echo $(date) - hello from ubuntu"
    resources:
      limits:
        cpu: 50m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 256Mi
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 3
    concurrencyPolicy: Forbid
    restartPolicy: OnFailure

  # third cron
  - name: hello-env-var
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 2000
    image:
      repository: busybox
      tag: latest
      imagePullPolicy: Always
    # optional env vars
    env:
      - name: ECHO_VAR
        value: "busybox"
    envFrom:
      - type: configmap
        name: my-configmap
      - type: configmap
        nameSuffix: your-configmap
      - type: secret
        name: my-secret
    schedule: "* * * * *"
    command: ["/bin/sh"]
    args:
      - "-c"
      - "echo $(date) - hello from $ECHO_VAR"
      - "echo $(date) - loaded secret $SECRET_DATA"
      - "echo $(date) - loaded config $CONFIG_DATA"
    resources:
      limits:
        cpu: 50m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 256Mi
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 3
    concurrencyPolicy: Forbid
    restartPolicy: Never
    nodeSelector:
      type: infra
    tolerations:
      - effect: NoSchedule
        operator: Exists
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/e2e-az-name
                  operator: In
                  values:
                    - e2e-az1
                    - e2e-az2
  # first regular job
  - name: hello-world-job
    image:
      repository: hello-world
      tag: latest
      imagePullPolicy: IfNotPresent
    concurrencyPolicy: Allow
    restartPolicy: OnFailure
    parallelism: 2
    completions: 2

vault:
  enabled: false
  role: "development"
  path: "k8s-applications"
  secretsFile:
    enabled: false
    restartCommand: "restart"
    additionalLabels:
      key: value
    annotations:
      key: value
    files:
      - mountPath: "/keys/custom-content-key.json"
        secretPath: "unevenlabs/test/app/keys"
        contents:
          - name: "username"
            value: .Data.username
          - name: "password"
            value: .Data.password
          - name: "endpoint"
            value: .Data.endpoint
        command: "echo 'Test command'"
      - mountPath: "/keys/key-1.json"
        secretPath: "unevenlabs/test/app/keys"
        secretKey: "KEY1"

opa:
  enabled: true

statefulSet:
  enabled: true

  name: custom-name

  # By default deploymentStrategy is set to rollingUpdate with maxSurge of 25% and maxUnavailable of 25%
  # You can change type to `Recreate` or can uncomment `rollingUpdate` specification and adjust them to your usage.
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

  # use host network
  hostNetwork: true

  # Select nodes to deploy which matches the following labels
  nodeSelector:
  # cloud.google.com/gke-nodepool: default-pool

  # Init containers which runs before the app container
  initContainers:
  # - name: init-contaner
  #   image: busybox
  #   imagePullPolicy: IfNotPresent
  #   command: ['/bin/sh']

  # Additional labels for Deployment
  additionalLabels:
    type: streaming
  # key: value

  # Additional label added on pod which is used in Service's Label Selector
  podLabels:
    env: local
  # env: prod

  # Annotations on deployments
  annotations:

  # Additional Pod Annotations added on pod created by this Deployment
  additionalPodAnnotations:
  # key: value

  # Replicas to be created
  replicas: 1

  # Secrets used to pull image
  imagePullSecrets: "github-docker-registry"

  # If want to mount Envs from configmap or secret
  envFrom: []
  # - type: configmap
  #   name: my-configmap
  # - type: configmap
  #   nameSuffix: your-configmap
  # - type: secret
  #   name: my-secret

  # Environment variables to be passed to the app container
  env:
    - name: ENVIRONMENT
      value: "local"
  # - name: ENVIRONMENT
  #   value: "dev"

  # Volumes to be added to the pod
  volumes:
    - name: config-volume
      configMap:
        name: configmap-name
  # - name: configmap-volume
  #   configMap:
  #     name: '{{ template "application.name" . }}-configmap-nameSuffix'
  # - name: secret-volume
  #   secret:
  #     secretName: secret-name
  # - name: volume-name
  #   emptyDir: {}
  # - name: persistent-volume-name
  #   persistentVolumeClaim:
  #     claimName: claim-name

  # Mount path for Volumes
  volumeMounts:
    - mountPath: /tmp
      name: price-stream-agg-data
  # - mountPath: /path
  #   name: volume-name

  # Taint tolerations for nodes
  tolerations:
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "app"
  #   effect: "NoSchedule"

  # Pod affinity and pod anti-affinity allow you to specify rules about how pods should be placed relative to other pods.
  affinity:
  #  nodeAffinity:
  #    requiredDuringSchedulingIgnoredDuringExecution:
  #      nodeSelectorTerms:
  #      - matchExpressions:
  #        - key: disktype
  #          operator: In
  #          values:
  #          - ssd

  # Image of the app container
  image:
    repository: ghcr.io/unevenlabs/example-app/example-app
    tag: 1.0.0
    pullPolicy: IfNotPresent

  # Readiness and Liveness probes
  probes:
    readinessProbe:
    # failureThreshold: 3
    # periodSeconds: 10
    # successThreshold: 1
    # timeoutSeconds: 1
    # initialDelaySeconds: 10
    # httpGet:
    #   path: /health
    #   port: 80
    livenessProbe:
    # failureThreshold: 3
    # periodSeconds: 10
    # successThreshold: 1
    # timeoutSeconds: 1
    # initialDelaySeconds: 10
    # httpGet:
    #   path: /health
    #   port: 80
    startupProbe:
    # failureThreshold: 3
    # periodSeconds: 10
    # successThreshold: 1
    # timeoutSeconds: 1
    # initialDelaySeconds: 10
    # httpGet:
    #   path: /health
    #   port: 80

  # Resources to be defined for pod
  resources:
    limits:
      memory: 512Mi
      cpu: 0.5
    requests:
      memory: 64Mi
      cpu: 0.1

  # Add additional containers besides init and app containers
  additionalContainers:
  # - name: sidecar-contaner
  #   image: busybox
  #   imagePullPolicy: IfNotPresent
  #   command: ['/bin/sh']

  # Security Context for the pod
  securityContext:
  # fsGroup: 2000

  # Command for primary container
  command: []

  # Args for primary contaner
  args: []

  # List of ports for the primary container
  ports:
  #- containerPort: 80
  #  name: http
  #  protocol: TCP
  #- containerPort: 443
  #  name: https
  #  protocol: TCP
  volumeClaimTemplates:
    - metadata:
        name: price-stream-agg-data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: ebs-gp3-16000-500
        resources:
          requests:
            storage: 10Gi
keda:
  enabled: true
  scaledObjects:
    - name: test-scaled-object-prometheus
      scaleTargetRef:
        apiVersion: apps/v1 # Optional. Default: apps/v1
        kind: kind-of-target-resource # Optional. Default: Deployment
        name: name-of-target-resource # Mandatory. Must be in the same namespace as the ScaledObject
        # envSourceContainerName: container-name          # Optional. Default: .spec.template.spec.containers[0]
      pollingInterval: 30
      cooldownPeriod: 300
      minReplicaCount: 1
      maxReplicaCount: 100
      # {list of triggers to activate scaling of the target resource}
      triggers:
        - type: prometheus
          metadata:
            serverAddress: http://prometheus-server
            metricName: nginx_connections_active_keda
            query: |
              sum(avg_over_time(nginx_ingress_nginx_connections_active{app="main-nginx-ingress"}[1m]))
            threshold: "100"
          # authenticationRef:                          # optional.
          #   name: keda-vault-prometheus-credential
    - name: test-scaled-object-kafka
      scaleTargetRef:
        apiVersion: apps/v1 # Optional. Default: apps/v1
        kind: kind-of-target-resource # Optional. Default: Deployment
        name: name-of-target-resource # Mandatory. Must be in the same namespace as the ScaledObject
        # envSourceContainerName: container-name         # Optional. Default: .spec.template.spec.containers[0]
      pollingInterval: 30 # Optional. Default: 30 seconds
      cooldownPeriod: 300 # Optional. Default: 300 seconds
      minReplicaCount: 1 # Optional. Default: 1
      maxReplicaCount: 100 # Optional. Default: 100
      fallback: # Optional. Section to specify fallback options
        failureThreshold: 3 # Mandatory if fallback section is included
        replicas: 6 # Mandatory if fallback section is included
      advanced: # Optional. Section to specify advanced options
        restoreToOriginalReplicaCount: false # Optional. Default: false
        horizontalPodAutoscalerConfig: # Optional. Section to specify HPA related options
          behavior: # Optional. Use to modify HPA's scaling behavior
            scaleDown:
              stabilizationWindowSeconds: 300
              policies:
                - type: Percent
                  value: 100
                  periodSeconds: 15
      # {list of triggers to activate scaling of the target resource}
      triggers:
        - type: kafka
          metadata:
            bootstrapServers: localhost:9092
            consumerGroup: my-group # Make sure that this consumer group name is the same one as the one that is consuming topics
            topic: test-topic
            # Optional
            lagThreshold: "50"
          authenticationRef:
            name: keda-vault-kafka-credential

  triggerAuthentications:
    - name: keda-vault-prometheus-credential
      spec:
        hashiCorpVault: # Optional.
          address: { hashicorp-vault-address } # Required.
          namespace: { hashicorp-vault-namespace } # Optional. Default is root namespace. Useful for Vault Enterprise
          authentication: token | kubernetes # Required.
          role: { hashicorp-vault-role } # Optional.
          mount: { hashicorp-vault-mount } # Optional.
          credential: # Optional.
            token: { hashicorp-vault-token } # Optional.
            serviceAccount: { path-to-service-account-file } # Optional.
          secrets: # Required.
            - parameter: { scaledObject-parameter-name } # Required.
              key: { hasicorp-vault-secret-key-name } # Required.
              path: { hasicorp-vault-secret-path } # Required.
    - name: keda-vault-kafka-credential
      kind: ClusterTriggerAuthentication # optional. Default is TriggerAuthentication. TriggerAuthentication is namespaced; ClusterTriggerAuthentication is cluster wide.
      spec:
        hashiCorpVault: # Optional.
          address: { hashicorp-vault-address } # Required.
          namespace: { hashicorp-vault-namespace } # Optional. Default is root namespace. Useful for Vault Enterprise
          authentication: token | kubernetes # Required.
          role: { hashicorp-vault-role } # Optional.
          mount: { hashicorp-vault-mount } # Optional.
          credential: # Optional.
            token: { hashicorp-vault-token } # Optional.
            serviceAccount: { path-to-service-account-file } # Optional.
          secrets: # Required.
            - parameter: { scaledObject-parameter-name } # Required.
              key: { hasicorp-vault-secret-key-name } # Required.
              path: { hasicorp-vault-secret-path } # Required.

securityGroupPolicy:
  enabled: true
  securityGroupId: sg-01234567890abcdef # Mandatory if enabled true

datadogMonitors:
  test1:
    name: test1
    spec:
      query: "max(last_5m):max:elasticsearch.unassigned_shards{cluster_name:dev-applications} > 50"
      type: "query alert"
      name: "Elasticsearch Unassigned Shards test"
      message: "@filipe@unevenlabs.com"
      tags:
        - "test:datadog"
      priority: 5
      options:
        thresholds:
          critical: "50"
  test2:
    name: test2
    spec:
      query: "max(last_5m):max:elasticsearch.unassigned_shards{cluster_name:dev-applications} > 50"
      type: "query alert"
      name: "Elasticsearch Unassigned Shards test"
      message: "@filipe@unevenlabs.com"
      tags:
        - "test:datadog"
      priority: 5
      options:
        thresholds:
          critical: "50"
